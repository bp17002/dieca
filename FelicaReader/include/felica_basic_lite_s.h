// felica_basic_lite_s.h -*-c++-*-
// FeliCa Access Library
// Copyright 2011 Sony Imaging Products & Solutions Inc.

// [CAUTION] This file is automatically generated. Do not edit this file.

#ifndef __FELICA_BASIC_LITE_S_H__
#define __FELICA_BASIC_LITE_S_H__

#ifndef GNU_LINUX
#ifndef MICROSOFT_WINDOWS
#define MICROSOFT_WINDOWS
#endif // MICROSOFT_WINDOWS
#endif // GNU_LINUX

#ifdef MICROSOFT_WINDOWS
#ifdef LIBRARY_EXPORTS
#define LIBRARY_API __declspec(dllexport)
#else
#define LIBRARY_API __declspec(dllimport)
#endif // LIBRARY_EXPORTS
#endif // MICROSOFT_WINDOWS
#ifdef GNU_LINUX
#define LIBRARY_API
#endif // GNU_LINUX

#ifdef STDCALL
#define CALLTYPE __stdcall
#else
#define CALLTYPE
#endif

#include "felica_error.h"
#include "rw_error.h"

#ifdef MICROSOFT_WINDOWS
#pragma pack(push, felica_h, 8)
#endif

#ifdef __cplusplus
#else if
   #define bool  unsigned char
   #define true  1
   #define false 0
#endif

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

typedef struct {
    char* port_name;               // ポートの名前
    unsigned long baud_rate;       // 0
    unsigned char encryption_mode; // 暗号化モード
    unsigned char* kar;            // dummy
    unsigned char* kbr;            // dummy
} structure_reader_writer_mode;

typedef struct {
    unsigned char* system_code; // システムコード (2 バイト)
    unsigned char time_slot;    // タイムスロット (0x00, 0x01, 0x03, 0x07, 0x0f のいずれか)
} structure_polling;

typedef struct {
    unsigned char* card_idm; // カードの IDm の格納領域 (8 バイト)
    unsigned char* card_pmm; // カードの PMm の格納領域 (8 バイト)
} structure_card_information;

typedef struct {
    unsigned char device_info_type;         //  USBリーダ／ライタ種別
    unsigned char device_info_connect;      //  USBリーダ／ライタ接続方式
                                            //  0x00: 内蔵
                                            //  0x01: 外付け
} structure_device_information;


LIBRARY_API bool CALLTYPE initialize_library(
    void
);

LIBRARY_API bool CALLTYPE dispose_library(
    void
);

LIBRARY_API bool CALLTYPE get_last_error_type(
    enumeration_felica_error_type* error_type  // エラータイプ
);

LIBRARY_API bool CALLTYPE get_last_error_types(
    enumeration_felica_error_type* felica_error_type, // FeliCa アクセスライブラリ (本ライブラリ) のエラータイプ
    enumeration_rw_error_type* rw_error_type          // FeliCa リーダ・ライタコントロールライブラリのエラータイプ
);

LIBRARY_API bool CALLTYPE open_reader_writer(
    const structure_reader_writer_mode* reader_writer_mode  // リーダ・ライタのモード
);

LIBRARY_API bool CALLTYPE open_reader_writer_auto(
    void
);

LIBRARY_API bool CALLTYPE close_reader_writer(
    void
);

LIBRARY_API bool CALLTYPE transaction_lock(
    void
);

LIBRARY_API bool CALLTYPE transaction_unlock(
    void
);

LIBRARY_API bool CALLTYPE get_device_information(
    const structure_device_information* device_information //デバイス情報構造体
);

LIBRARY_API bool CALLTYPE set_time_out(
    unsigned long time_out  // タイムアウト値．単位はミリ秒．
);

LIBRARY_API bool CALLTYPE get_time_out(
    unsigned long* time_out  // タイムアウト値．単位はミリ秒．
);

LIBRARY_API bool CALLTYPE set_lock_timeout( 
    unsigned long lock_timeout // USBリーダ／ライタのアクセス権獲得待ちタイムアウト値（ms） 0:無限待ち
);

LIBRARY_API bool CALLTYPE get_lock_timeout(
    unsigned long* lock_timeout // USBリーダ／ライタのアクセス権獲得待ちタイムアウト値（ms） 0:無限待ち
);

LIBRARY_API bool CALLTYPE set_polling_timeout( 
    unsigned long polling_timeout // USBリーダ／ライタのポーリング処理用タイムアウト値（ms）
);

LIBRARY_API bool CALLTYPE get_polling_timeout(
    unsigned long* polling_timeout // USBリーダ／ライタのポーリング処理用タイムアウト値（ms）
);

LIBRARY_API bool CALLTYPE polling_and_get_card_information(
    const structure_polling* polling,             // ポーリングをするために必要な情報
    unsigned char* number_of_cards,               // カードの枚数 n (1 <= n <= 3) (1 バイト)
    structure_card_information* card_information  // 1 枚目のカードの情報
);

LIBRARY_API bool CALLTYPE get_last_card_information(
    unsigned char card_index,                     // カードのインデックス i (1 <= i <= 3)
    structure_card_information* card_information  // カードの情報
);

#ifdef __cplusplus
}
#endif // __cplusplus

#ifdef MICROSOFT_WINDOWS
#pragma pack(pop, felica_h, 8)
#endif

#endif // __FELICA_BASIC_LITE_S_H__
